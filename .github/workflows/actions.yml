name: MasterDeployCI
on:
#  on:
#    pull_request:
#      branches:
#        - master
#    push:
#      branches:
#        - master
  push:
    branches:
      - feature
      - master
env:
  DOCKER_CLI_EXPERIMENTAL: enabled
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x]
    steps:
    - uses: actions/checkout@v2
#    - name: Build the Docker image AND run tests
#      run: |
#        cd ./client
#        docker build -f Dockerfile.dev -t test_image .
#        docker run test_image npm test -- --coverage
      #-e CI=true
#    - name: build images AND push to hub
##      if: github.ref == 'refs/heads/master'
#      run: |
#        echo ${DOCKER_PASSWORD} | docker login ${DOCKER_REGISTRY} -u ${DOCKER_USERNAME} --password-stdin
#
#        echo "building '${CLIENT_IMAGE} image'"
#        cd ./${CLIENT_IMAGE}
#        docker build -f Dockerfile -t ${DOCKER_USERNAME}/${CLIENT_IMAGE}:${TAG} .
#        docker push ${DOCKER_USERNAME}/${CLIENT_IMAGE}:${TAG}
#        cd ..
#
#        echo "building '${SERVER_IMAGE} image'"
#        cd ./${SERVER_IMAGE}
#        docker build -f Dockerfile -t ${DOCKER_USERNAME}/${SERVER_IMAGE}:${TAG} .
#        docker push ${DOCKER_USERNAME}/${SERVER_IMAGE}:${TAG}
#        cd ..
#
#        echo "building '${NGINX_IMAGE} image'"
#        cd ./${NGINX_IMAGE}
#        docker build -f Dockerfile -t ${DOCKER_USERNAME}/${NGINX_IMAGE}:${TAG} .
#        docker push ${DOCKER_USERNAME}/${NGINX_IMAGE}:${TAG}
#        cd ..
#
#        echo "building '${WORKER_IMAGE} image'"
#        cd ./${WORKER_IMAGE}
#        docker build -f Dockerfile -t ${DOCKER_USERNAME}/${WORKER_IMAGE}:${TAG} .
#        docker push ${DOCKER_USERNAME}/${WORKER_IMAGE}:${TAG}
#        cd ..
#      env:
#        DOCKER_USERNAME: ${{ secrets.DOCKER_ID }}
#        DOCKER_PASSWORD: ${{ secrets.DOCKER_AUTH }}
#        DOCKER_REGISTRY: docker.io #registry.hub.docker.com
#        TAG: latest
#        CLIENT_IMAGE: client
#        SERVER_IMAGE: server
#        NGINX_IMAGE: nginx
#        WORKER_IMAGE: worker



#    - name: Configure AWS credentials
#      uses: aws-actions/configure-aws-credentials@v1
#      with:
#        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
#        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
#        aws-region: us-east-2
#    - name: Login to Amazon ECR
#      id: login-ecr
#      uses: aws-actions/amazon-ecr-login@v1



#    - name: Fill in the new image ID in the Amazon ECS task definition
#      id: task-def
#      uses: aws-actions/amazon-ecs-render-task-definition@v1
#      with:
#        task-definition: Dockerrun.aws.json
#        container-name: kuber-react-multi-cont
#        image: ${{ steps.build-image.outputs.image }}
    - name: Generate build number
      id: buildnumber
      uses: einaregilsson/build-number@v2
      with:
        token: ${{secrets.github_token}}
    - name: Deploy to EB
      uses: einaregilsson/beanstalk-deploy@v5
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
        aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
        region: us-east-2
        application_name: kuber-react-multi-cont
        environment_name: KuberReactMultiCont-env
        version_label: ${{ steps.buildnumber.outputs.build_number }}
        # github.run_id
        deployment_package: Dockerrun.aws.json
        use_existing_version_if_available: false

#    - name: Deploy Amazon ECS task definition
#      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#      with:
##        task-definition: ${{ steps.task-def.outputs.task-definition }}
#        task-definition: Dockerrun.aws.json
#        service: kuber-react-multi-cont
#        cluster: KuberReactMultiCont-env
##        cluster: awseb-KuberReactMultiCont-env-qgxxvqtykr
##        wait-for-service-stability: true

#    - name: deploy to Elastic Beanstalk
#      run:
##        region: us-east-2
##        provider: elasticbeanstalk
##        app: kuber-react-multi-cont
##        env: KuberReactMultiCont-env
##        bucket_name: elasticbeanstalk-us-east-2-084960321434
##        bucket_path: kuber-redis
##        on:
##          branch: master
#        - name: Deploy to EB
#            uses: einaregilsson/beanstalk-deploy@v5
#            with:
#              aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
#              aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#              application_name: MyApplicationName
#              environment_name: MyApplication-Environment
#              version_label: 12345
#              region: us-west-2
#              deployment_package: deploy.zip

    - name: Check
      run: echo "Check health"
